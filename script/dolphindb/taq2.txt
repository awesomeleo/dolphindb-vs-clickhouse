// ---------------多节点并发测试-------------------------

login(`admin, `123456)

// ----------------- 参数
taq_path = '/data2/TAQ/'
sample_taq_path = taq_path + 'TAQ20070801.csv'
db_path = 'dfs://TAQ2'
table_name = `taq
tb_schema = extractTextSchema(sample_taq_path)
schema = table(lower(tb_schema.name) as name, tb_schema.type)
print(schema)

// ----------------- 创建 schema
// 将列名调整为小写避免与 DolphinDB 内置的 SYMBOL, DATE, TIME 等保留关键字产生冲突
tb_schema = extractTextSchema(sample_taq_path)
schema = table(lower(tb_schema.name) as name, tb_schema.type)

// 加载 sample table, 用第一个 CSV 中的股票代码频率作为分区范围的依据
sample_tb = ploadText(sample_taq_path,   , schema)
sample_freq_tb = select count(*) from sample_tb group by symbol
print(sample_freq_tb)
sample_tb = NULL

// 8369 rows, [symbol, count], 分到 100 个 buckets
BIN_NUM = 100

buckets = cutPoints(sample_freq_tb.symbol, BIN_NUM, sample_freq_tb.count)
// [A, ABL, ACU, ..., ZZZ], 101 个边界
buckets[BIN_NUM] = `ZZZZZZ		// 调整最右边界



// ----------------- 创建数据库分区
// 按 date(日期), symbol(股票代码) 进行分区 每天再根据 symbol 分为 100 个分区
DATE_RANGE = 2007.08.01..2007.09.30
date_schema = database("", VALUE, DATE_RANGE)
symbol_schema = database("", RANGE, buckets)
db = database(db_path, COMPO, [date_schema, symbol_schema])
db.createPartitionedTable(table(100:0, schema.name, schema.type), table_name, `date`symbol)
close(db)


// --------------------- 导入数据
db_path = 'dfs://TAQ2'

def load_csv(db_path, f) {
	db = database(db_path)
	loadTextEx(db, `taq, `date`symbol, f)	
}

def loadCSV(job_id, job_desc, db_path) {
	taq_path = '/data2/TAQ/'
	fs = taq_path + (exec filename from files(taq_path) order by filename)
	for (f in fs) {
		submitJob(job_id, job_desc, load_csv, db_path, f)
	}
}

rpc("P1-node1", loadCSV, `node1, "load csv", db_path)
rpc("P2-node1", loadCSV, `node2, "load csv", db_path)
rpc("P3-node1", loadCSV, `node3, "load csv", db_path)
rpc("P4-node1", loadCSV, `node4, "load csv", db_path)
rpc("P5-node1", loadCSV, `node5, "load csv", db_path)
rpc("P6-node1", loadCSV, `node6, "load csv", db_path)
rpc("P7-node1", loadCSV, `node7, "load csv", db_path)


pnodeRun(getRecentJobs)




// --------------------- 加载数据库
login(`admin, `123456)

db_path = 'dfs://TAQ2'
db = database(db_path)
taq = db.loadTable(`taq)

/*
db_path = 'dfs://TAQ2'
dropDatabase(db_path)
*/

// ------------------------ 查询性能测试 --------------------------------------




pnodeRun(clearAllCache)

// 0. 查询总记录数
timer
select count(*) from taq
// times: 137ms 190ms 160ms
// 连续查询 140ms 142ms 148ms



// 1. 点查询：按股票代码、时间查询
timer
select * from taq
where
	symbol = 'IBM', 
	date == 2007.09.07
// times: 412ms 319ms 330ms
// 连续查询 121ms 119ms 117ms




// 2. 范围查询：查询某时间段内的某些股票的所有记录
timer 
select symbol, time, bid, ofr from taq 
where
	symbol in ('IBM', 'MSFT', 'GOOG', 'YHOO'),
	date between 2007.08.03 : 2007.08.07,
	bid > 20

// times: 971ms 1224ms 958ms
// 连续查询 850ms 855ms 839ms




// 3. top 1000 + 排序: 按 [股票代码、日期] 过滤，按 [卖出与买入价格差] 降序 排序
timer 
select top 1000 * from taq 
where
	symbol in ('IBM', 'MSFT', 'GOOG', 'YHOO'),
	date == 2007.08.07,
	time >= 07:36:37,
	ofr > bid
order by (ofr - bid) desc
// times: 607ms 596ms 411ms
// 连续查询 40ms 42ms 38ms




// 4. 聚合查询. 单分区维度
timer 
select max(bid) as max_bid, min(ofr) as min_ofr from taq
where 
	date == 2007.08.02,
	symbol == 'IBM',
	ofr > bid
group by minute(time)
// times: 328ms 390ms 178ms
// 连续查询 28ms 29ms 28ms



// 5. 聚合查询.多分区维度 + 排序
timer
select std(bid) as std_bid, sum(bidsiz) as sum_bidsiz from taq 
where 
	((date = 2007.09.10 and time > 09:00:00) or ( date = 2007.08.11 and time < 21:00:00)),
	symbol in `IBM`MSFT`GOOG`YHOO,
	bid >= 20,
	ofr > 20
group by symbol, minute(time) 
order by symbol asc, minute_time asc
// times: 360ms 425ms 252ms
// 连续查询 94ms 101ms 96ms



// 6. 经典查询：按 [多个股票代码、日期，时间范围、报价范围] 过滤，查询 [股票代码、时间、买入价、卖出价]
timer
select symbol, time, bid, ofr from taq where
	symbol in ('IBM', 'MSFT', 'GOOG', 'YHOO'), 
	date = 2007.08.03, 
	time between 09:30:00 : 14:30:00, 
	bid > 0, 
	ofr > bid
// times: 364ms 357ms 359ms
// 连续查询 225ms 233ms 226ms



// 7. 窗口函数查询：查询某种股票时间的差值（s)
timer
select symbol, time, deltas(time) as time_diff from taq
where
	symbol = 'YHOO',
	date = 2007.09.04
order by time asc
// times: 128ms 123ms 123ms
// 连续查询 91ms 87ms 94ms



// 8. 经典查询：计算 某天 (每个股票 每分钟) 最大卖出与最小买入价之差
timer
select max(ofr) - min(bid) as gap from taq
where 
	date = 2007.08.01, 
	bid > 0, 
	ofr > bid
group by symbol, minute(time) as minute
// times: 4799ms 5481ms 4051ms
// 连续查询 2826ms 3004ms 2872ms


// 9. median 函数查询, 拿到所有股票数据后计算
timer
select median(ofr), median(bid) from taq 
where 
	date = 2007.08.10, 
	symbol = 'IBM'
// times: 321ms 364ms 229ms
// 连续查询  44ms 44ms 46ms

SELECT median(ofr), median(bid) from taq5 where date = '2007-08-10' AND symbol = 'IBM' AND bid > 113.2


//select 500 most liquid stocks, get minute level returns, and calculate the pair wise correlation
timer {
	dateValue=2007.08.01
	num=500
	syms = (exec count(*) from taq 
	where 
		date = dateValue, 
		time between 09:30:00 : 15:59:59, 
		0<bid, bid<ofr, ofr<bid*1.2
	group by symbol order by count desc).symbol[0:num]

	priceMatrix = exec avg(bid + ofr)/2.0 as price from taq 
	where 
		date = dateValue, Symbol in syms, 
		0<bid, bid<ofr, ofr<bid*1.2, 
		time between 09:30:00 : 15:59:59 
	pivot by time.minute() as minute, Symbol
}

// times: 4387ms 4264ms 3642ms
// 连续查询  3518ms 3988ms 3649ms


retMatrix = each(def(x):ratios(x)-1, priceMatrix)
corrMatrix = cross(corr, retMatrix, retMatrix)

//get 10 most correlated stocks for each stock
mostCorrelated = select * from table(corrMatrix).rename!(`sym`corrSym`corr) 
context by sym having rank(corr,false) between 1:10

//get most correlated 10 stocks for selected stocks
select * from mostCorrelated 
where sym='LEH' order by corr desc




// --------------------------------------------------------------------------------------------- //

// 7. 经典查询：按 [日期、时间范围、卖出买入价格条件、股票代码] 过滤，查询 (各个股票 每分钟) [平均变化幅度]
timer
select avg( (ofr - bid) / (ofr + bid) ) * 2 as spread 
from taq 
where 
	date = 2007.08.01,
	bid > 0,
	ofr > bid
group by symbol, minute(time) as minute
// times: 
// 连续查询 // times: 321ms 364ms 229ms
// 连续查询  44ms 44ms 46ms

// 内存 


// 9. 经典查询：按 [股票代码、日期段、时间段] 过滤, 查询 (每天，时间段内每分钟) 均价
timer
select avg(ofr + bid) / 2.0 as avg_price
from taq 
where 
	symbol = 'IBM', 
	date between 2007.08.01 : 2007.08.07,
	time between 09:30:00 : 16:00:00
group by date, minute(time) as minute
// times: 146.258 ms 133.078 ms  177.921 ms
// 连续查询 28.464 ms  23.873 ms  24.132 ms
// 内存 196.3 308.3 



// 10. 经典查询：按 [日期段、时间段] 过滤, 查询 (每股票，每天) 均价
timer
select avg(ofr + bid) / 2.0 as avg_price
from taq 
where
	date between 2007.08.05 : 2007.08.07,
	time between 09:30:00 : 16:00:00
group by symbol, date
// times: 11138.148 ms  3845.77 ms  3991.298 ms
// 连续查询 1961.145 ms  2068.212 ms  1993.328 ms
// 内存 8,962.8  11,900.9



// 11. 经典查询：计算 某个日期段 有成交记录的 (每天, 每股票) 加权均价，并按 (日期，股票代码) 排序
timer
select wavg(bid, bidsiz) as vwab 
from taq
where date between 2007.08.05 : 2007.08.06
group by date, symbol
	having sum(bidsiz) > 0
order by date desc, symbol
// times: 2664.635 ms  1357.005 ms 1465.089 ms
// 连续查询 676.901 ms  630.876 ms  632.98 ms
// 内存 3,322.5  4,240.6


